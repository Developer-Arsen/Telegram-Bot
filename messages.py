from langdetect import detect as detect_langdetect, detect_langs as detect_langs_langdetect

RULES = """üìú ‘Ω’¥’¢’´ ’°’∂’§’°’¥’∂’•÷Ä’´ ’æ’°÷Ä÷Ñ’°’£’Æ’´ ’Ø’°’∂’∏’∂’∂’•÷Ä üìú

1. üôè ’Ä’°÷Ä’£’°’∂÷Ñ: ’Ä’°÷Ä’£’•÷Ñ ’¥’´’¥’µ’°’∂÷Å ’ø’•’Ω’°’Ø’•’ø’∂’•÷Ä’® ÷á ’°’∂’∞’°’ø’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®:
2. üö´ ‘±’∂’±’∂’°’Ø’°’∂ ’æ’´÷Ä’°’æ’∏÷Ä’°’∂÷Ñ’∂’•÷Ä ’π’Ø’°’∂: ‘±÷Ä’£’•’¨’æ’∏÷Ç’¥ ’ß ’°’∂’±’∂’°’Ø’°’∂ ’∞’°÷Ä’±’°’Ø’∏÷Ç’¥’∂’•÷Ä’®, ’æ’´÷Ä’°’æ’∏÷Ä’°’∂÷Ñ’∂’•÷Ä’® ÷á ’°’∂’∫’°’ø’∑’°’≥ ’¨’•’¶’∏÷Ç’∂÷â
3. üì∏ ‘º’∏÷Ç’Ω’°’∂’Ø’°÷Ä’∏’æ ’∂’∏÷Ç’µ’∂’°’Ø’°’∂’°÷Å’∏÷Ç’¥: ’Ü’∏÷Ä ’°’∂’§’°’¥’∂’•÷Ä’® ’∫’°÷Ä’ø’°’§’´÷Ä ’∫’•’ø÷Ñ ’ß ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’•’∂ ’´÷Ä’•’∂÷Å ’´÷Ä’°’Ø’°’∂ ’¨’∏÷Ç’Ω’°’∂’Ø’°÷Ä’®:
4. üõë ‘ø’°÷Ä’£’°’æ’∏÷Ä’æ’∏’≤ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä: ‘Ω’¥’¢’∏÷Ç’¥ ’©’∏÷Ç’µ’¨ ’π’•’∂ ’ø÷Ä’æ’∏÷Ç’¥ ’£’º’•’∞’´’Ø ’Ø’°’¥ ’∏’π ’∫’°’ø’∑’°’≥ ’¢’°’º’•÷Ä:
5. üí° ‘Ω’∏÷Ä’∞’∏÷Ç÷Ä’§’∂’•÷Ä: ‘Ω’¥’¢’´ ’°’∂’§’°’¥’∂’•÷Ä’® ’Ø’°÷Ä’∏’≤ ’•’∂ ’ø’°’¨ ’∏÷Ç ’Ω’ø’°’∂’°’¨ ÷Ö’£’ø’°’Ø’°÷Ä ’≠’∏÷Ä’∞’∏÷Ç÷Ä’§’∂’•÷Ä’ù ’°’º’°’∂÷Å ’æ’´÷Ä’°’æ’∏÷Ä’•’¨’∏÷Ç:
6. üîí ‘≥’°’≤’ø’∂’´’∏÷Ç’©’µ’∏÷Ç’∂: ’ä’°’∞’∫’°’∂’•÷Ñ ’≠’¥’¢’´ ’°’∂’§’°’¥’∂’•÷Ä’´ ’£’°’≤’ø’∂’´’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∏’π ’¥’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’π’¢’°÷Å’°’∞’°’µ’ø’•÷Ñ ’°’∂’±’∂’°’Ø’°’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’°’º’°’∂÷Å ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’°’∂:
7. üÜò ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂: ‘µ’©’• ’∏÷Ç’∂’•÷Ñ ’∞’°÷Ä÷Å ’Ø’°’¥ ’≠’∂’§’´÷Ä, ’§’´’¥’•÷Ñ ’≠’¥’¢’´ ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä’´’∂:
8. ‚öñÔ∏è ‘ø’∏’∂’Ω’ø÷Ä’∏÷Ç’Ø’ø’´’æ’∏÷Ç’©’µ’°’∂ ’∫’°÷Ä’ø’°’§÷Ä’°’∂÷Ñ: ’î’∂’∂’°’§’°’ø’∏÷Ç’©’µ’∏÷Ç’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’Ø’°’º’∏÷Ç÷Å’∏’≤’°’Ø’°’∂ ÷á ’∂’∫’°’ø’°’Ø’°’∏÷Ç’≤’≤’æ’°’Æ:
9. üö´ ‘Ω’∂’§÷Ä’°’∂÷Ñ’∂’•÷Ä: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’π’£÷Ä’•’¨ ’Ω’∫’°’¥ ÷á ’£’∏’æ’°’¶’§’∂’•÷Ä:
10. ü§ù ’Ä’°’¥’•÷Ä’°’∑’≠’∏÷Ç’©’µ’∏÷Ç’∂÷â ‘±’ª’°’Ø÷Å’•÷Ñ ’¥’´’¥’µ’°’∂÷Å, ’≠’©’°’∂’•÷Ñ ’©’´’¥’°’µ’´’∂ ’°’∑’≠’°’ø’°’Ω’´÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’°’µ’´’∂ ’∞’°÷Ä’°’¢’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®:

üìå ‘ø’°’∂’∏’∂’∂’•÷Ä’´’∂ ’∞’•’ø÷á’•’¨’® ’≠’©’°’∂’∏÷Ç’¥ ’ß ’°’∂’∞’°’ø’°’Ø’°’∂ ÷á ’©’´’¥’°’µ’´’∂ ’°’∑’≠’°’ø’°’∂÷Ñ’´ ’°÷Ä’§’µ’∏÷Ç’∂’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂’®÷â
"""

NO_FACE_DETECTED = "‘≤’∏’ø’® ’π’Ø’°÷Ä’∏’≤’°÷Å’°’æ ’∞’°’µ’ø’∂’°’¢’•÷Ä’•’¨ ’§’•’¥÷Ñ’® üòî"
NO_PROFILE_PHOTO_MSG = "‘º’∏÷Ç’Ω’°’∂’Ø’°÷Ä ’π’Ø’° üì∑"
NO_SECOND_PHOTO_MSG = "‘≤’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’ß ’•÷Ä’Ø÷Ä’∏÷Ä’§ ’¨’∏÷Ç’Ω’°’∂’Ø’°÷Ä’® üì∏"
NO_LAST_NANE_MSG = "‘≤’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’ß ’°’¶’£’°’∂’∏÷Ç’∂’® ‚ùå"

LAST_NAME = "‘±’¶’£’°’∂’∏÷Ç’∂ üìù"
PROFILE_PHOTO_MSG = "‘º’∏÷Ç’Ω’°’∂’Ø’°÷Ä ’§’•’¥÷Ñ’∏’æ ’π’Ø’° üì∑üòä"
PROFILE_PHOTO2_MSG = "‘µ÷Ä’Ø÷Ä’∏÷Ä’§ ’∂’°’≠’°’£’´’Æ ’¨’∏÷Ç’Ω’°’∂’Ø’°÷Ä ’§’•’¥÷Ñ’∏’æ üì∏üòä"
BLOCK_MSG = " ‘±’µ’Ω ÷Ö’£’ø’°’ø’•÷Ä’® ’°÷Ä’£’•’¨’°÷É’°’Ø’•’¨ ’ß ’°’∂’∞’°’µ’ø ’°’≤’¢’µ’∏÷Ç÷Ä’∂’•÷Ä’´÷Å ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’®’∂’§’∏÷Ç’∂’∏÷Ç’¥’®÷â ‚õî"


async def sendMsgToAdmins(chat_id, context, msg) -> None:
    administrators = await context.bot.get_chat_administrators(chat_id)
    for admin in administrators:
        if admin.user.is_bot:
            continue
        await context.bot.send_message(admin.user.id, msg)

async def sendPhotoToAdmins(chat_id, context, photo) -> None:
    administrators = await context.bot.get_chat_administrators(chat_id)
    for admin in administrators:
        if admin.user.is_bot:
            continue
        await context.bot.send_photo(admin.user.id, photo)

async def welcome_message(first_name, last_name):
    message = f"üéâ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø {first_name} {last_name} ’§’•’∫’´ Fundamental Crypto Academy! üá¶üá≤\nüåü ’Ñ’°’≤’©’∏÷Ç’¥ ’•’∂÷Ñ ’Å’•’¶ ’¥’•’Æ ’∞’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’±’•÷Ä ’∏÷Ç’Ω’∏÷Ç’¥’∂’°’Ø’°’∂ ’≥’°’∂’°’∫’°÷Ä’∞’´’∂! üéìüìö"
    return message

async def ValidationErrorToAdmins(member, groupName, msg):
    user_id = member.id
    first_name = member.first_name
    last_name = member.last_name

    return (
        f"üëã ’Ü’∏÷Ä ÷Ö’£’ø’°’ø’•÷Ä ’¥’´’°÷Å’°’æ, ’¢’°’µ÷Å ’∞’•’º’°÷Å’æ’•÷Å\n\n"
        f"üìõ ’ä’°’ø’≥’°’º: {msg}\n"
        f"üôç‚Äç‚ôÇÔ∏è ’ï’£’ø’°’ø’•÷Ä: {first_name} {last_name}\n"
        f"üÜî ’ï’£’ø’°’ø’´÷Ä’∏’ª ID: {user_id}\n"
        f"üí¨ ‘Ω’¥’¢’´ ’°’∂’æ’°’∂’∏÷Ç’¥: {groupName}"
    )

async def ValidationErrorToUser(msg):
    return (
        "üö´ ’Ñ’∏÷Ç’ø÷Ñ’´ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’¥’•÷Ä’™’æ’•÷Å\n\n"
        "‚ö†Ô∏è ’ë’°’æ’∏÷Ñ, ’æ’°’æ’•÷Ä’°÷Å’¥’°’∂ ’Ω’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨÷â\n"
        f"‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’°’æ’•’¨’°÷Å’∂’•’¨ ’±’•÷Ä {msg}’ù ’≠’∂’§÷Ä’°’∂÷Ñ’® ’°’æ’°÷Ä’ø’´’∂ ’∞’°’Ω÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â üìù\n\n"
        "’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’±’•÷Ä ’®’¥’¢’º’∂’¥’°’∂ ’∞’°’¥’°÷Ä! üôè"
    )

cross_words_en = {
    "Damn", "Hell", "Stupid", "Idiot", "Fool", "Bastard", "Crap", "Moron", "Dumb", "Shut up",
    "Jerk", "Loser", "Scum", "Freak", "Lame", "Pathetic", "Sucks", "Piss off", "Douche", "Asshole",
    "Bitch", "Fuck", "Shit", "Whore", "Slut", "Prick", "Dick", "Pussy", "Cunt", "Ass",
    "Jackass", "Retard", "Sissy", "Scumbag", "Wanker", "Bullshit", "Damn it", "Pissed", "Craphead", "Motherfucker",
    "Son of a bitch", "Douchebag", "Bastards", "Fucker", "Fuckface", "Cock", "Cockhead", "Shithead", "Twat", "Arse",
    "Bugger", "Tosser", "Knobhead", "Pillock", "Knob", "Git", "Muppet", "Shag", "Tosspot", "Piss",
    "Bollocks", "Wanker", "Bellend", "Prat", "Chav", "Slag", "Wazzock", "Arsehole", "Bint", "Skank",
    "Wench", "Ponce", "Tart", "Bastard", "Pikey", "Knobend", "Nobhead", "Cocksucker", "Shite", "Twunt",
    "Bugger off", "Sod off", "Nobber", "Fanny", "Boff", "Minger", "Pikey", "Slapper", "Tart", "Troglodyte"
}

cross_words_ru = {
    "–ß—ë—Ä—Ç", "–ê–¥", "–ì–ª—É–ø—ã–π", "–ò–¥–∏–æ—Ç", "–î—É—Ä–∞–∫", "–£–±–ª—é–¥–æ–∫", "–î–µ—Ä—å–º–æ", "–î–µ–±–∏–ª", "–¢—É–ø–æ–π", "–ó–∞—Ç–∫–Ω–∏—Å—å",
    "–ü—Ä–∏–¥—É—Ä–æ–∫", "–õ–æ—Ö", "–ú—Ä–∞–∑—å", "–ß—É—á–µ–ª–æ", "–°–ª–∞–±–∞–∫", "–ñ–∞–ª–∫–∏–π", "–û—Ç—Å—Ç–æ–π", "–û—Ç–≤–∞–ª–∏", "–î–æ–ª–±–æ—ë–±", "–ú—É–¥–∞–∫",
    "–°—É–∫–∞", "–•—É–π", "–ë–ª—è–¥—å", "–®–ª—é—Ö–∞", "–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞", "–£—Ä–æ–¥", "–ß–ª–µ–Ω", "–ü–∏–∑–¥–∞", "–ê–Ω—É—Å", "–ñ–æ–ø–∞",
    "–ö—Ä–µ—Ç–∏–Ω", "–°–æ–ø–ª—è–∫", "–¢–≤–∞—Ä—å", "–ë–∞—Ä–∞–Ω", "–ü–∏–¥–æ—Ä–∞—Å", "–î–µ—Ä—å–º–æ–µ–¥", "–ì–æ–≤–Ω—é–∫", "–ú—É–¥–∞—á–æ–∫", "–•–µ—Ä–æ–≤–∏–Ω–∞", "–î—Ä—è–Ω—å",
    "–°–≤–æ–ª–æ—á—å", "–ú—É–¥–∞–∫–∏", "–£–±–ª—é–¥–∫–∏", "–ü–∏–¥–∞—Ä–∞—Å—ã", "–ï–±–ª–∞–Ω", "–•—É–π–ª–æ", "–ì–æ–≤–Ω–æ–µ–¥", "–£–µ–±–∞–Ω", "–¢—É–ø–∏—Ü–∞", "–ê—Ä—Å",
    "–ë—É–≥–æ—Ä", "–¢—É–ø–Ω—è–∫", "–ì–æ–Ω–¥–æ–Ω", "–ü–æ—à—ë–ª —Ç—ã", "–ß–º–æ", "–î–µ–±–∏–ª—ã", "–î–æ–ª–±–æ—ë–±—ã", "–ü–∏–¥–∞—Ä–∞—Å—ã", "–•—É–µ—Å–æ—Å", "–ß–º–æ—à–Ω–∏–∫",
    "–¢–≤–∞—Ä–∏", "–£–±–ª—é–¥–æ—á–Ω–∞—è", "–ì–æ–≤–Ω—é—à–∫–∏", "–ü–∏–∑–¥—é–∫", "–¢—É–ø–æ—Ä—ã–ª—ã–π", "–ú—É–¥–∞—á–∫–∏", "–•–µ—Ä–Ω—è", "–°—Ä–∞–Ω—ã–π", "–ï–±–∞–Ω—É—Ç—ã–π", "–ì–æ–≤–Ω–æ",
    "–£—ë–±–æ–∫", "–ö–æ–∑–ª–∏–Ω–∞", "–ü–∏–¥–æ—Ä", "–°—É–∫–∞", "–•—É—è—Ä–∏—Ç—å", "–î—Ä–æ—á–∏—Ç—å", "–ü–∏–∑–¥–µ—Ç—å", "–ó–∞–µ–±–∞–ª", "–ï–±–∞—Ç—å", "–ü–∏–¥–∞—Ä–∞—Å–∏–Ω–∞",
    "–ü–∏–¥–∞—Ä–∞—à–∫–∞", "–ó–∞–µ–±–∏—Å—å", "–ü–∏–∑–¥–µ—Ü", "–ú—É–¥–∞—á–Ω—è", "–ï–±–ª–∞–Ω—Å—Ç–≤–æ", "–ë–ª—è–¥—å", "–ü–∏–∑–¥–∞—Ç—ã–π", "–ï–±–∞–Ω—É—Ç—ã–π", "–ú—É–¥–∞–∫", "–ì–æ–≤–Ω—é–∫",
    "–ü–∏–¥–∞—Ä–æ–∫", "–•—É–π–ª–æ", "–ü–∏–∑–¥—ë–∂", "–Å–±–Ω—É—Ç—å—Å—è", "–ú—É–¥–∏–ª–∞", "–ü–∏–¥–∞—Ä–∞—Å–∫–∞", "–ß–ª–µ–Ω–æ—Å–æ—Å", "–ì–æ–≤–Ω–æ–µ–¥", "–£—ë–±–∏—â–µ", "–¢—É–ø–∏–∑–¥—é–∫"
}

cross_words_am = {
    "‘±’∂’´’Æ’æ’°’Æ", "‘±’∫’∏÷Ç’∑", "‘±’∂’Ø’•’¨÷Ñ", "‘ª’§’´’∏’ø", "‘±’∂’°’Ω’∏÷Ç’∂", "‘ø’•’≤’ø’∏’ø", "’Ä’´’¥’°÷Ä", "‘Ω’•’¨’°’£’°÷Ä", "‘≤’©’°’¥’´’ø", "‘º’º’´÷Ä",
    "‘±’∂’∫’´’ø’°’∂", "‘Ω’≤’≥’∏÷Ç’Ø", "’è’∞’°’Ω", "’è’°’Ø’°’∂÷Ñ", "‘±’∂’ø’•÷Ä", "‘≥’µ’∏’º", "‘≤’∏’¶", "’á’∏’º’¢’°", "’ä’∏’º’∂’´’Ø", "’ä’∏’º’∂’´’Ø’∏÷Ç’©’µ’∏÷Ç’∂",
    "’Ä’∏’£’•’Ø’°’∂", "‘±’∂’§’´’¥’°’§÷Ä’•’¨’´", "‘π’∑’∂’°’¥’°’Ø’°’∂", "’Ä’°’Ø’°’∞’°’µ÷Ä’•’∂’°’Ω’´÷Ä’°’Ø’°’∂", "’è’≠’¥’°÷Ä", "’è’Ø’¨’∏÷Ä", "‘±’≤’•’ø", "’Ü’•’º", "‘≥’∏’≤",
    "‘Ω’∏’¶", "‘π’°÷É’©÷É’∏÷Ç’Ø", "’ç÷Ä’´’Ø’°", "‘±’∂’¢’°÷Ä’∏’µ’°’Ø’°’∂", "’ç÷Ä’´’Ø’°’∂’•÷Ä", "’Ä÷Ä’•’∑’∂’•÷Ä", "’ç’°’ø’Ø’°’Æ’∂’•÷Ä", "‘≥’∏’≤’•÷Ä", "‘±÷Ä’Æ’°’©’°÷Ñ’°’≤’∂’•÷Ä",
    "’è’∂’°÷Ñ’°’∂’§", "‘±’∂’°’Ω’∏÷Ç’∂’∂’•÷Ä", "‘≤’∏’¶’•÷Ä", "’ç÷Ä’´’Ø’°’∂’•÷Ä", "‘±’∂’∫’´’ø’°’∂’∂’•÷Ä", "’Ä’´’¥’°÷Ä’∂’•÷Ä", "‘π’°÷É’©÷É’∏÷Ç’Ø’∂’•÷Ä", "‘π’∑’∂’°’¥’´’∂’•÷Ä",
    "‘±’∂’¢’°÷Ä’∏’µ’°’Ø’°’∂’∂’•÷Ä", "’Ä’∏’£’•’Ø’°’∂’∂’•÷Ä", "‘ø’•’≤’Æ’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", "‘¥’°’ø’°÷Ä’Ø’°’¥’´’ø’∏÷Ç’©’µ’∏÷Ç’∂", "‘≥’•’ø’∂’°’ø’°÷Ä’°’Æ", "‘±’∂’∞’∏’£’´", "’ç÷Ä’¢’°’∫’´’≤’Æ’∂’•÷Ä",
    "‘≤’∏’¶’´", "’è’°’Ø’°’∂÷Ñ’´", "‘≥’µ’∏÷Ä’£’µ’∏’º", "‘≥’∏’¥’´’Ø", "‘π’∏÷Ç÷Ä÷Ñ", "‘≤’∏’¶’°’æ’°’ø", "’á’∂’°÷Å’∏’≤", "‘≤’∏’¶’°’ø’•’Ω", "’á’∂’•÷Ä", "‘Ω’∏’¶’•÷Ä",
    "‘≥’∏’¥’•’∑", "’è’°’æ’°÷Ä", "’ä’°’≠’°’∂", "’É’´’≥’∏÷Ç", "‘≥’∏’¥’•÷Ä"
}

language_map = {
    'en': cross_words_en,
    'ru': cross_words_ru,
    'hy': cross_words_am
}

def detect_language(text):
    unicode_ranges = {
        'en': ('\u0041', '\u005A', '\u0061', '\u007A'),
        'ru': ('\u0400', '\u04FF'),  
        'hy': ('\u0530', '\u058F')   
    }
    
    def char_in_range(char, unicode_range):
        return unicode_range[0] <= char <= unicode_range[1]
    
    language_scores = {lang: 0 for lang in unicode_ranges}
    
    for char in text:
        for lang, ranges in unicode_ranges.items():
            if any(char_in_range(char, (ranges[i], ranges[i+1])) for i in range(0, len(ranges), 2)):
                language_scores[lang] += 1
                
    detected_language = max(language_scores, key=language_scores.get)
    return detected_language

async def contains_cross_words(text):
    language_code = detect_language(text)
    text_lower = text.lower()
    cross_words = language_map[language_code]

    for word in cross_words:
        if word.lower() in text_lower:
            return True
    return False
